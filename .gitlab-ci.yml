image: eclipse-temurin:17-jdk

stages:
  - build
  - release

variables:
  CI: true
  ANDROID_SDK_ROOT: "/sdk"
  KEYSTORE_FILE: "$CI_PROJECT_DIR/keystore.jks"
  APK_PATH: "app/build/outputs/apk/release/"

before_script:
  - apt-get update && apt-get install -y unzip wget curl jq
  - wget https://dl.google.com/android/repository/commandlinetools-linux-8092744_latest.zip -O sdk-tools.zip
  - mkdir -p $ANDROID_SDK_ROOT && unzip sdk-tools.zip -d $ANDROID_SDK_ROOT
  - yes | $ANDROID_SDK_ROOT/cmdline-tools/bin/sdkmanager --licenses
  - $ANDROID_SDK_ROOT/cmdline-tools/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "platforms;android-35" "build-tools;35.0.2"  # update this if a new version is set in build.gradle!

build_release_apk:
  stage: build
  only:
    - tags
  script:
    - echo "Checking build environment ..."
    - java --version
    - echo "Checks complete"

    - echo "Decoding keystore ..."
    - echo $KEYSTORE_BASE64 | base64 -d > $KEYSTORE_FILE
    - |
      if [ $? -ne 0 ]; then
        echo "Error: Failed to decode the keystore!"
        exit 1
      fi
    - |
      if [ ! -f "$KEYSTORE_FILE" ]; then
        echo "Error: Failed to write the keystore file!"
        exit 1
      fi
    - echo "Successfully decoded keystore"

    - echo "Building release apk for new tag $CI_COMMIT_TAG ..."
    - chmod +x ./gradlew
    - ./gradlew assembleRelease
    - export RELEASE_APK=$(find "$APK_PATH" -name "*.apk")
    - |
      if [ -z "$RELEASE_APK" ]; then
        echo "Error: Failed to find the built APK!"
        exit 1
      fi
    - export RELEASE_APK_NAME=$(basename "$RELEASE_APK")
    - echo "Successfully built APK $RELEASE_APK_NAME"
  artifacts:
    paths:
      - $RELEASE_APK
    expire_in: 7 days

create_release:
  stage: release
  only:
    - tags
  dependencies:
    - build_release_apk
  script:
    - RELEASE_NAME="$CI_COMMIT_TAG"
    - echo "Creating new release $RELEASE_NAME ..."
    - |
      curl --request POST --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      --data "name=$RELEASE_NAME" \
      --data "tag=$CI_COMMIT_TAG" \
      "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/releases"
    - |
      if [ $? -ne 0 ]; then
        echo "Error: Failed to create the release!"
        exit 1
      fi
    - echo "Successfully created release"

    - echo "Uploading APK"
    - |
      UPLOAD_URL=$(curl --request POST --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      --form "file=$RELEASE_APK" \ 
      "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/uploads" | jq -r '.url')
    - |
      if [ -z "$UPLOAD_URL" ]; then \
        echo "Error: Upload of APK failed!"
        exit 1  
      fi
    - |
      if [ $? -ne 0 ]; then
        echo "Error: Failed to upload the APK!"
        exit 1
      fi
    - echo "Successfully uploaded APK at $UPLOAD_URL"

    - echo "Connecting APK to release"
    - |
      curl --request PUT --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      --data "assets[links][][name]=$RELEASE_APK_NAME \ 
      --data "assets[links][][url]=$CI_PROJECT_URL$UPLOAD_URL \ 
      "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/releases/$RELEASE_NAME"
    - |
      if [ $? -ne 0 ]; then
        echo "Error: Failed to connect release and APK!"
        exit 1
      fi
    - echo "Sucessfully connected APK to release"

    - echo "Creating static URL"
    - |
      curl --request POST --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      --data name="APK release" \
      --data url=$CI_PROJECT_URL$UPLOAD_URL \
      --data filepath="/app-release.apk" \
      "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/releases/$RELEASE_NAME/assets/links"
    - |
      if [ $? -ne 0 ]; then
        echo "Error: Failed to create a static URL!"
        exit 1
      fi
    - echo "Successfully created static URL"

    - echo "Done"


